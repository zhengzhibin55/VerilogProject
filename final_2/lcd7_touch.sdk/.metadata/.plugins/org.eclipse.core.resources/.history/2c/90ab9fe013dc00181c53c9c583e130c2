
#include "xil_types.h"
#include <stdio.h>
#include <math.h>
#include "xparameters.h"
#include "xil_io.h"
#include<complex.h>
#include"D:\study\c\la\complex_matric.h"

int main()
{

u16 num=0;
s32 a1;
s32 a2;

printf("------The test is start...------\n\r");

Xil_Out32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + 7000, 0x0f0f0f02);



    //XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR是axi_bram_ctrl_1的地址，Xil_In32 通过控制axi_bram_ctrl_0，把blk_mem_gen_0里的数据读出来
    //PS和PL可以在blk_mem_gen_0里共享数据

	while(num==0)
	{
		a1 = Xil_In32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + 8000);
		if ((a1==0xF0F0F0F2)||(a1==0xF0F0F0F1))
		{
			num=1;
		}
	}

float L=1;

//矩阵转换
float tepT=0.866025403784439;
float invT1=0.333333333333333,invT2=0.166666666666667,invT3=0.288675134594813;


float Rg;

float _Complex Zfou[6][1]={0};
float _Complex Z1201[3][3]={0};

float _Complex X0b[21][1]={0};
float _Complex Z1202[6][6]={0};


////////////////////////////单回////////////////////////////////////////////////
////////////////////////////单回///////////////////////////////////////////////
////////////////////////////单回/////////////////////////////////////////////
////////////////////////////单回/////////////////////////////////////////////////

int i=0,j=0;

if(a1==0xF0F0F0F1)

{

/////////////////////////////变量区//////////////////////////////////////////////
//读数
int j1=0,j2=0;
int dt[168];        //存储数据
float _Complex b[84];    //存储复数数据
float _Complex b1[42];    //存储复数数据
float _Complex b2[42];    //存储复数数据
float _Complex b3[42];    //存储复数数据
int Rem;//Remainder是余数

//产生矩阵
float _Complex Ia7,Ib7,Ic7,Ia8,Ib8,Ic8,Ia9,Ib9,Ic9;

//逐步加权最小二乘
int m,n;      //行列
int FLAG1=1,FLAG2=1;      //是否可逆标志位


float MAX=1;       //先进入循环然后赋值




float _Complex T[3][3]={{1+0I,1+0I,1+0I},
                        {-0.5-tepT*I,-0.5+tepT*I,1+0I},
                        {-0.5+tepT*I,-0.5-tepT*I,1+0I}};
float _Complex invT[3][3]={{invT1+0I,-invT2+invT3*I,-invT2-invT3*I},
                            {invT1+0I,-invT2-invT3*I,-invT2+invT3*I},
                            {invT1+0I,invT1+0I,invT1+0I}};


//电阻
float Rgab1,Rgac1,Rgba1,Rgbc1,Rgca1,Rgcb1;

//////////////////////////////读数//////////////////////////////////////////////

	for(j=0;j<84;j++)
       {
            a1 = Xil_In32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + j*8+4);
			a2 = Xil_In32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + j*8+8);
			b[j]=a1-a2*I;
       }

//将b分成两组，即两组不同限流电阻下的数据

for(j=0,j1=0,j2=0;j<84;j++)
{
    Rem=j%28;
    if(Rem<14)
    {
        b1[j1]=b[j];j1=j1+1;
    }
    else
    {
        b2[j2]=b[j];j2=j2+1;
    }
}
//变j2的赋值2为1
//变j2的赋值2为1
//变j2的赋值2为1
//提取相位信息分别减去电源电压相位
for(j1=0;j1<3;j1++)
{
    for(j2=1;j2<14;j2++)
    {
        b1[j1*14+j2]=b1[j1*14+j2]*(cos(carg(b1[j1*14]))-I*sin(carg(b1[j1*14])));
        b2[j1*14+j2]=b2[j1*14+j2]*(cos(carg(b2[j1*14]))-I*sin(carg(b2[j1*14])));
    }
}

c_jian(b3,b1,b2,42,1);


//移动数据位置，数据顺序为U1，I1，U2，I2....

for(j1=0;j1<3;j1++)
{
    for(j2=0;j2<6;j2++)
    {
        b3[j1*14+7-j2]=b3[j1*14+6-j2];
    }
}


//////////////////////////////产生矩阵//////////////////////////////////////////////
//////////////电流数据

//////A接地
Ia7=b3[3];
Ib7=0;
Ic7=0;
//////B接地
Ia8=0;
Ib8=b3[14+5];
Ic8=0;
//////C接地
Ia9=0;
Ib9=0;
Ic9=b3[2*14+7];


//////////////////////////////////复数域逐步加权最小二乘//////////////////////////////////////////////

float _Complex bfou[9];


for(j=0;j<3;j++)
{
    bfou[j*3]=b3[j*14+2];
	bfou[j*3+1]=b3[j*14+4];
	bfou[j*3+2]=b3[j*14+6];
}

float _Complex Afou[9][6]={{Ia7,0,0,Ib7,0,Ic7},{0,Ib7,0,Ia7,Ic7,0},{0,0,Ic7,0,Ib7,Ia7},{Ia8,0,0,Ib8,0,Ic8},{0,Ib8,0,Ia8,Ic8,0},{0,0,Ic8,0,Ib8,Ia8},{Ia9,0,0,Ib9,0,Ic9},{0,Ib9,0,Ia9,Ic9,0},{0,0,Ic9,0,Ib9,Ia9}};

//////////////////////////////////最小二乘
m=9;n=6;
float _Complex zhuan21[6][9],cheng21[6][6],ni21[6][6],cheng22[6][9],zhuan22[9][1],cheng23[6][1];
c_zhuan2(zhuan21,Afou,m,n);
c_cheng2(cheng21,zhuan21,6,9,Afou,9,6);
FLAG1=c_ni(ni21,cheng21,n);
c_cheng2(cheng22,ni21,6,6,zhuan21,6,9);
c_zhuan2(zhuan22,bfou,1,m);
c_cheng2(cheng23,cheng22,n,m,zhuan22,m,1);

FLAG2=c_if(cheng23,6,1);

c_copy(Zfou,cheng23,6,1);

//求方差矩阵
float  Wfou[9][9];

//加权最小二乘  使用x'w代替x'
float _Complex zhuan2[6][9];


for(i=0;(i<50)&&FLAG1&&FLAG2&&(MAX>1e-5);i++)
{
//求方差矩阵
c_fangcha(Wfou,bfou,Afou,9,6,cheng23);

//加权最小二乘  使用x'w代替x'
c_zhuan2(zhuan2,Afou,m,n);
c_cheng3(zhuan21,zhuan2,6,9,Wfou,9,9);
c_cheng2(cheng21,zhuan21,6,9,Afou,9,6);
FLAG1=c_ni(ni21,cheng21,n);
c_cheng2(cheng22,ni21,6,6,zhuan21,6,9);
c_zhuan2(zhuan22,bfou,1,m);
c_cheng2(cheng23,cheng22,n,m,zhuan22,m,1);

FLAG2=c_if(cheng23,6,1);

if(FLAG1&&FLAG2)
    {
        MAX=c_max(cheng23,Zfou,6,1);
        c_copy(Zfou,cheng23,6,1);
    }
}

//////////阻抗变换
////单位线路阻抗
for(i=0;i<6;i++)
{
    Zfou[i][0]=Zfou[i][0]/L;
}

////阻抗转换

float _Complex Zabc[3][3]={{Zfou[0][0],Zfou[3][0],Zfou[5][0]},
                            {Zfou[3][0],Zfou[1][0],Zfou[4][0]},
                            {Zfou[5][0],Zfou[4][0],Zfou[2][0]}};

float Ztep[3][3];

c_cheng2(Ztep,invT,3,3,Zabc,3,3);

c_cheng2(Z1201,Ztep,3,3,T,3,3);

/////////////////////////////////地阻///////////////////////////////////////////////

//////地阻 当单相接地时，另外两相的的电压就是地阻的电压
//////A接地
Rgab1=creal(b3[4]/Ia7);
Rgac1=creal(b3[6]/Ia7);

//////B接地
Rgba1=creal(b3[14+2]/Ib8);
Rgbc1=creal(b3[14+6]/Ib8);

//////C接地
Rgca1=creal(b3[2*14+2]/Ic9);
Rgcb1=creal(b3[2*14+4]/Ic9);

Rg=(Rgab1+Rgac1+Rgba1+Rgbc1+Rgca1+Rgcb1)/6;



//添加比差校正程序
//添加比差校正程序
//添加比差校正程序

Zfou[0][0]=16.4215*Zfou[0][0]-1.2560;
Zfou[3][0]=15.27*Zfou[3][0]+0.00831;
Zfou[5][0]=15.27*Zfou[5][0]+0.00831;


Zfou[1][0]=16.6466*Zfou[1][0]-1.7302;
Zfou[4][0]=15.27*Zfou[4][0]+0.00831;

Zfou[2][0]=16.0609*Zfou[2][0]-1.1014;


Rg=15.27*Rg+0.00831;


//更改虚部的值
//更改虚部的值
//更改虚部的值
Zfou[0][0]=creal(Zfou[0][0])+15.27*cimag(b3[2]/b3[3])*I;
Zfou[1][0]=creal(Zfou[1][0])+15.27*cimag(b3[14+4]/b3[14+5])*I;
Zfou[2][0]=creal(Zfou[2][0])+15.27*cimag(b3[14*2+6]/b3[14*2+7])*I;



printf("the Zfou0 is %f+%f*i\n",creal(Zfou[0][0]),cimag(Zfou[0][0]));
printf("the Zfou1 is %f+%f*i\n",creal(Zfou[1][0]),cimag(Zfou[1][0]));
printf("the Zfou2 is %f+%f*i\n",creal(Zfou[2][0]),cimag(Zfou[2][0]));
printf("the Zfou3 is %f+%f*i\n",creal(Zfou[3][0]),cimag(Zfou[3][0]));
printf("the Zfou4 is %f+%f*i\n",creal(Zfou[4][0]),cimag(Zfou[4][0]));
printf("the Zfou5 is %f+%f*i\n",creal(Zfou[5][0]),cimag(Zfou[5][0]));

printf("the Rg is %f\n",Rg);

}

////////////////////////////双回////////////////////////////////////////////////
////////////////////////////双回///////////////////////////////////////////////
////////////////////////////双回/////////////////////////////////////////////
////////////////////////////双回/////////////////////////////////////////////////



else if(a1==0xF0F0F0F2)

{

/////////////////////////////变量区//////////////////////////////////////////////
//读数
int j1=0,j2=0;
int dt[336];        //存储数据
float _Complex b[168];    //存储复数数据
float _Complex b1[84];    //存储复数数据
float _Complex b2[84];    //存储复数数据
float _Complex b3[84];    //存储复数数据
int Rem;//Remainder是余数

//产生矩阵
float _Complex Ia1,Ib1,Ic1,Ia2,Ib2,Ic2,Ia3,Ib3,Ic3,Ia4,Ib4,Ic4,Ia5,Ib5,Ic5,Ia6,Ib6,Ic6,
                IA1,IB1,IC1,IA2,IB2,IC2,IA3,IB3,IC3,IA4,IB4,IC4,IA5,IB5,IC5,IA6,IB6,IC6;
//逐步加权最小二乘
int m,n;      //行列
int FLAG1=1,FLAG2=1;      //是否可逆标志位

float MAX=1;       //先进入循环然后赋值

//转变矩阵阵列


float _Complex T[6][6]={{1+0I,1+0I,1+0I,0,0,0},
                        {-0.5-tepT*I,-0.5+tepT*I,1+0I,0,0,0},
                        {-0.5+tepT*I,-0.5-tepT*I,1+0I,0,0,0},
						{0,0,0,1+0I,1+0I,1+0I},
                        {0,0,0,-0.5-tepT*I,-0.5+tepT*I,1+0I},
                        {0,0,0,-0.5+tepT*I,-0.5-tepT*I,1+0I}
						};

float _Complex invT[6][6]={{invT1+0I,-invT2+invT3*I,-invT2-invT3*I,0,0,0},
                            {invT1+0I,-invT2-invT3*I,-invT2+invT3*I,0,0,0},
                            {invT1+0I,invT1+0I,invT1+0I,0,0,0},
							{0,0,0,invT1+0I,-invT2+invT3*I,-invT2-invT3*I},
                            {0,0,0,invT1+0I,-invT2-invT3*I,-invT2+invT3*I},
                            {0,0,0,invT1+0I,invT1+0I,invT1+0I}
							};








//电阻
float Rga11,Rga12,Rga13,Rga14,Rga15,Rgb11,Rgb12,Rgb13,Rgb14,Rgb15,Rgc11,Rgc12,Rgc13,Rgc14,Rgc15,Rga21,Rga22,Rga23,Rga24,Rga25,Rgb21,Rgb22,Rgb23,Rgb24,Rgb25,Rgc21,Rgc22,Rgc23,Rgc24,Rgc25;

//////////////////////////////读数//////////////////////////////////////////////

	for(j=0;j<168;j++)
       {
            a1 = Xil_In32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + j*8+4);
			a2 = Xil_In32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + j*8+8);
			b[j]=a1-a2*I;
       }

//将b分成两组，即两组不同限流电阻下的数据
for(j=0,j1=0,j2=0;j<168;j++)
{
    Rem=j%28;
    if(Rem<14)
    {
        b1[j1]=b[j];j1=j1+1;
    }
    else
    {
        b2[j2]=b[j];j2=j2+1;
    }
}
//变j2的赋值2为1
//变j2的赋值2为1
//变j2的赋值2为1
//提取相位信息分别减去电源电压相位
for(j1=0;j1<6;j1++)
{
    for(j2=1;j2<14;j2++)
    {
        b1[j1*14+j2]=b1[j1*14+j2]*(cos(carg(b1[j1*14]))-I*sin(carg(b1[j1*14])));
        b2[j1*14+j2]=b2[j1*14+j2]*(cos(carg(b2[j1*14]))-I*sin(carg(b2[j1*14])));
    }
}

c_jian(b3,b1,b2,84,1);

//更改数据顺序，为U1，I1，U2，I2....

for(j1=0;j1<6;j1++)
{
    for(j2=0;j2<6;j2++)
    {
        b3[j1*14+7-j2]=b3[j1*14+6-j2];
    }
}


//////////////////////////////产生矩阵//////////////////////////////////////////////
//////////////电流数据

//////A接地
Ia1=b3[0+3];
Ib1=0;
Ic1=0;
IA1=0;
IB1=0;
IC1=0;
//////B接地
Ia2=0;
Ib2=b3[14+5];
Ic2=0;
IA2=0;
IB2=0;
IC2=0;
//////C接地
Ia3=0;
Ib3=0;
Ic3=b3[2*14+7];
IA3=0;
IB3=0;
IC3=0;
//////A'接地
Ia4=0;
Ib4=0;
Ic4=0;
IA4=b3[3*14+9];
IB4=0;
IC4=0;
//////B'接地
Ia5=0;
Ib5=0;
Ic5=0;
IA5=0;
IB5=b3[4*14+11];
IC5=0;
//////C'接地
Ia6=0;
Ib6=0;
Ic6=0;
IA6=0;
IB6=0;
IC6=b3[5*14+13];

/////////////////////////////////复数域逐步加权/////////////////////////////////////////////


float _Complex Ub[36];


for(j=0;j<6;j++)
{
    Ub[j*6]=b3[j*14+2];
	Ub[j*6+1]=b3[j*14+4];
	Ub[j*6+2]=b3[j*14+6];
    Ub[j*6+3]=b3[j*14+8];
	Ub[j*6+4]=b3[j*14+10];
	Ub[j*6+5]=b3[j*14+12];
}
////给Ab赋值
float _Complex Ab[36][21]={//A接地
{Ia1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,Ia1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,Ia1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,Ia1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,Ia1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,Ia1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//B接地
{0,Ib2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,Ib2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,Ib2,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,Ib2,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,Ib2,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,Ib2,0,0,0,0,0,0,0,0,0,0},
//C接地
{0,0,Ic3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,Ic3,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,Ic3,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,Ic3,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,Ic3,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,Ic3,0,0,0,0,0,0},
//A'接地
{0,0,0,IA4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,IA4,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,IA4,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,IA4,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,IA4,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,IA4,0,0,0},
//B'接地
{0,0,0,0,IB5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,IB5,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,IB5,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,IB5,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,IB5,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,IB5,0},
//C'接地
{0,0,0,0,0,IC6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,IC6,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,IC6,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,IC6,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,IC6,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,IC6}
};
////给Ab赋值
//////////////////////////////////最小二乘////////////////

m=36;n=21;
float _Complex zhuan21[21][36],cheng21[21][21],ni21[21][21],cheng22[21][36],zhuan22[36][1],cheng23[21][1];
c_zhuan2(zhuan21,Ab,m,n);
c_cheng2(cheng21,zhuan21,21,36,Ab,36,21);
FLAG1=c_ni(ni21,cheng21,n);
c_cheng2(cheng22,ni21,21,21,zhuan21,21,36);
c_zhuan2(zhuan22,Ub,1,m);
c_cheng2(cheng23,cheng22,n,m,zhuan22,m,1);

FLAG2=c_if(cheng23,21,1);
c_copy(X0b,cheng23,21,1);

//求方差矩阵
float  Wfou[36][36];

//加权最小二乘  使用x'w代替x'
float _Complex zhuan2[21][36];


for(i=0;(i<50)&&FLAG1&&FLAG2&&(MAX>1e-5);i++)
{
//求方差矩阵
c_fangcha(Wfou,Ub,Ab,36,21,cheng23);

//加权最小二乘  使用x'w代替x'
c_zhuan2(zhuan2,Ab,m,n);
c_cheng3(zhuan21,zhuan2,21,36,Wfou,36,36);
c_cheng2(cheng21,zhuan21,21,36,Ab,36,21);
FLAG1=c_ni(ni21,cheng21,n);
c_cheng2(cheng22,ni21,21,21,zhuan21,21,36);
c_zhuan2(zhuan22,Ub,1,m);
c_cheng2(cheng23,cheng22,n,m,zhuan22,m,1);

FLAG2=c_if(cheng23,21,1);

if(FLAG1&&FLAG2)
    {
        MAX=c_max(cheng23,X0b,21,1);
        c_copy(X0b,cheng23,21,1);
    }
}

//////////阻抗变换
////单位线路阻抗
for(i=0;i<21;i++)
{
    X0b[i][0]=X0b[i][0]/L;
}

////阻抗转换

float _Complex Zabc[6][6]={{X0b[0][0],X0b[1][0],X0b[2][0],X0b[3][0],X0b[4][0],X0b[5][0]},
							{X0b[1][0],X0b[6][0],X0b[7][0],X0b[8][0],X0b[9][0],X0b[10][0]},
							{X0b[2][0],X0b[7][0],X0b[11][0],X0b[12][0],X0b[13][0],X0b[14][0]},
							{X0b[3][0],X0b[8][0],X0b[12][0],X0b[15][0],X0b[16][0],X0b[17][0]},
							{X0b[4][0],X0b[9][0],X0b[13][0],X0b[16][0],X0b[18][0],X0b[19][0]},
							{X0b[5][0],X0b[10][0],X0b[14][0],X0b[17][0],X0b[19][0],X0b[20][0]}
							};


float _Complex Ztep[6][6];

c_cheng2(Ztep,invT,6,6,Zabc,6,6);

c_cheng2(Z1202,Ztep,6,6,T,6,6);



/////////////////////////////////地阻/////////////////////////////////////////////

Rga11=creal(b3[0+4]/Ia1);
Rga12=creal(b3[0+6]/Ia1);
Rga13=creal( b3[0+8]/Ia1);
Rga14=creal(b3[0+10]/Ia1);
Rga15=creal(b3[0+12]/Ia1);

Rgb11=creal(b3[14+2]/Ib2);
Rgb12=creal(b3[14+6]/Ib2);
Rgb13=creal(b3[14+8]/Ib2);
Rgb14=creal(b3[14+10]/Ib2);
Rgb15=creal(b3[14+12]/Ib2);

Rgc11=creal(b3[2*14+2]/Ic3);
Rgc12=creal(b3[2*14+4]/Ic3);
Rgc13=creal(b3[2*14+8]/Ic3);
Rgc14=creal(b3[2*14+10]/Ic3);
Rgc15=creal(b3[2*14+12]/Ic3);

Rga21=creal(b3[3*14+2]/IA4);
Rga22=creal(b3[3*14+4]/IA4);
Rga23=creal(b3[3*14+6]/IA4);
Rga24=creal(b3[3*14+10]/IA4);
Rga25=creal(b3[3*14+12]/IA4);

Rgb21=creal(b3[4*14+2]/IB5);
Rgb22=creal(b3[4*14+4]/IB5);
Rgb23=creal(b3[4*14+6]/IB5);
Rgb24=creal(b3[4*14+8]/IB5);
Rgb25=creal( b3[4*14+12]/IB5);

Rgc21=creal(b3[5*14+2]/IC6);
Rgc22=creal(b3[5*14+4]/IC6);
Rgc23=creal(b3[5*14+6]/IC6);
Rgc24=creal(b3[5*14+8]/IC6);
Rgc25=creal(b3[5*14+10]/IC6);

Rg=(Rga11+Rga12+Rga13+Rga14+Rga15+Rgb11+Rgb12+Rgb13+Rgb14
    +Rgb15+Rgc11+Rgc12+Rgc13+Rgc14+Rgc15+Rga21+Rga22+Rga23
    +Rga24+Rga25+Rgb21+Rgb22+Rgb23+Rgb24+Rgb25+Rgc21+Rgc22
    +Rgc23+Rgc24+Rgc25)/30;

///////////////////////////输出电阻和地阻////////////////////////////////////////////////////////////

//添加比差校正程序
//添加比差校正程序
//添加比差校正程序

X0b[0][0]=16.4215*X0b[0][0]-1.2560;
X0b[1][0]=15.33*X0b[1][0]+0.008153;
X0b[2][0]=15.33*X0b[2][0]+0.008153;
X0b[3][0]=15.33*X0b[3][0]+0.008153;
X0b[4][0]=15.33*X0b[4][0]+0.008153;
X0b[5][0]=15.33*X0b[5][0]+0.008153;


X0b[6][0]=16.6466*X0b[6][0]-1.7302;
X0b[7][0]=15.33*X0b[7][0]+0.008153;
X0b[8][0]=15.33*X0b[8][0]+0.008153;
X0b[9][0]=15.33*X0b[9][0]+0.008153;
X0b[10][0]=15.33*X0b[10][0]+0.008153;

X0b[11][0]=16.0609*X0b[11][0]-1.1014;
X0b[12][0]=15.33*X0b[12][0]+0.008153;
X0b[13][0]=15.33*X0b[13][0]+0.008153;
X0b[14][0]=15.33*X0b[14][0]+0.008153;

X0b[15][0]=15.9809*X0b[15][0]-1.2759;
X0b[16][0]=15.33*X0b[16][0]+0.008153;
X0b[17][0]=15.33*X0b[17][0]+0.008153;

X0b[18][0]=16.6644*X0b[18][0]-1.9454;
X0b[19][0]=15.33*X0b[19][0]+0.008153;

X0b[20][0]=17.0270*X0b[20][0]-2.6181;



Rg=15.33*Rg+0.008153;

//更改虚部的值
//更改虚部的值
//更改虚部的值

X0b[0][0]=creal(X0b[0][0])+15.33*cimag(b3[2]/b3[3])*I;
X0b[6][0]=creal(X0b[6][0])+15.33*cimag(b3[14+4]/b3[14+5])*I;
X0b[11][0]=creal(X0b[11][0])+15.33*cimag(b3[14*2+6]/b3[14*2+7])*I;
X0b[15][0]=creal(X0b[15][0])+15.33*cimag(b3[14*3+8]/b3[14*3+9])*I;
X0b[18][0]=creal(X0b[18][0])+15.33*cimag(b3[14*4+10]/b3[14*4+11])*I;
X0b[20][0]=creal(X0b[20][0])+15.33*cimag(b3[14*5+12]/b3[14*5+13])*I;





printf("the X0b0 is %f+%f*i\n",creal(X0b[0][0]),cimag(X0b[0][0]));
printf("the X0b1 is %f+%f*i\n",creal(X0b[6][0]),cimag(X0b[6][0]));
printf("the X0b2 is %f+%f*i\n",creal(X0b[11][0]),cimag(X0b[11][0]));
printf("the X0b3 is %f+%f*i\n",creal(X0b[15][0]),cimag(X0b[15][0]));
printf("the X0b4 is %f+%f*i\n",creal(X0b[18][0]),cimag(X0b[18][0]));
printf("the X0b5 is %f+%f*i\n",creal(X0b[20][0]),cimag(X0b[20][0]));

printf("the X0 is %f+%f*i\n",creal(X0b[1][0]),cimag(X0b[1][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[2][0]),cimag(X0b[2][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[3][0]),cimag(X0b[3][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[4][0]),cimag(X0b[4][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[5][0]),cimag(X0b[5][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[7][0]),cimag(X0b[7][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[8][0]),cimag(X0b[8][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[9][0]),cimag(X0b[9][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[10][0]),cimag(X0b[10][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[12][0]),cimag(X0b[12][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[13][0]),cimag(X0b[13][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[14][0]),cimag(X0b[14][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[16][0]),cimag(X0b[16][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[17][0]),cimag(X0b[17][0]));
printf("the X0 is %f+%f*i\n",creal(X0b[19][0]),cimag(X0b[19][0]));

printf("the Rg is %f\n",Rg);


}
else
    printf("wrong");


 xil_printf("------The test is end!------\n\r");

    return 0;



}










